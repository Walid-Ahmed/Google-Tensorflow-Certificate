# -*- coding: utf-8 -*-
"""layer_freezing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iwEntuuhMgoGUwMQZwjwEGh1oanrtG-j
"""

# https://github.com/pytorch/examples/blob/master/mnist/main.py
# https://discuss.pytorch.org/t/how-the-pytorch-freeze-network-in-some-layers-only-the-rest-of-the-training/7088/2
# https://jimmy-shen.medium.com/pytorch-freeze-part-of-the-layers-4554105e03a6
from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.optim.lr_scheduler import StepLR
#from torchsummary import summary
import time
import random
import numpy as np
import matplotlib.pyplot as plt

import os
import ssl; ssl._create_default_https_context = ssl._create_unverified_context;  # to use unverified ssl


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, 1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1)
        self.dropout1 = nn.Dropout(0.25)
        self.dropout2 = nn.Dropout(0.5)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.dropout1(x)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.dropout2(x)
        x = self.fc2(x)
        output = F.log_softmax(x, dim=1)
        return output


def randomLayerFreeze(model , threshold=0.5):
    '''
    #for param in model.parameters():
        #param.requires_grad = False
    #return
    for layer in (model.children()):
        print("[INFO] Working with layer {}".format(layer))
        for param in layer.parameters():
            print(param)
            param.requires_grad=False
    '''

    params = model.state_dict()
    print(list(params.keys()))   #['conv1.weight', 'conv1.bias', 'conv2.weight', 'conv2.bias', 'fc1.weight','fc1.bias', 'fc2.weight', 'fc2.bias']

    if (random.random()>threshold):
        model.conv1.weight.requires_grad = False
        model.conv1.bias.requires_grad = False
    else:
        model.conv1.weight.requires_grad = True
        model.conv1.bias.requires_grad = True

    if (random.random() > threshold):
        model.conv2.weight.requires_grad = False
        model.conv2.bias.requires_grad = False
    else:
        model.conv2.weight.requires_grad = True
        model.conv2.bias.requires_grad = True


    if (random.random() > threshold):
        model.fc1.weight.requires_grad = False
        model.fc1.bias.requires_grad = False
    else:
        model.fc1.weight.requires_grad = True
        model.fc1.bias.requires_grad = True






    print("--------------------------------------------------------")
    for name, param in model.named_parameters():
        if param.requires_grad:
            print("{}  requires gradients".format(name))
        else:
            print("{} does not require gradients".format(name))

    print("--------------------------------------------------------")


    '''

    for param in model.parameters():
        #print(param)
        param.requires_grad = False

    for name, layer in model.named_modules():
        if isinstance(layer, torch.nn.Conv2d):
            #print(name, layer.weight)
            print(name)
    '''


def train( model, device, train_loader, optimizer, epoch):
    model.train()
    #epochLoss=[]
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        log_interval=1000
        #print("loss.item= {} ".format(loss.item()))
        #epochLoss.append(loss.item())
        if batch_idx % log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                100. * batch_idx / len(train_loader), loss.item()))

        #return epochLoss

def test(model, device, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()  # sum up batch loss
            pred = output.argmax(dim=1, keepdim=True)  # get the index of the max log-probability
            correct += pred.eq(target.view_as(pred)).sum().item()

    test_loss /= len(test_loader.dataset)
    accuracy=100. * correct / len(test_loader.dataset)

    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset),
        100. * correct / len(test_loader.dataset)))
    return test_loss ,accuracy


def main(EPOCHS,threshold=0.5):
    # Training settings
    timeEpochs=[]
    accResults=[]
    lossResults=[]



    use_cuda = torch.cuda.is_available()


    device = torch.device("cuda" if use_cuda else "cpu")

    train_kwargs = {'batch_size': 64}

    test_kwargs = {'batch_size': 1000}
    if use_cuda:
        cuda_kwargs = {'num_workers': 1,
                       'pin_memory': True,
                       'shuffle': True}
        train_kwargs.update(cuda_kwargs)
        test_kwargs.update(cuda_kwargs)

    transform=transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.1307,), (0.3081,))
        ])
    dataset1 = datasets.MNIST('../data', train=True, download=True,transform=transform)
    dataset2 = datasets.MNIST('../data', train=False,transform=transform)
    train_loader = torch.utils.data.DataLoader(dataset1,**train_kwargs)
    test_loader = torch.utils.data.DataLoader(dataset2, **test_kwargs)

    model = Net().to(device)
    #summary(model, (1, 28, 28) ,device=device)
    optimizer = optim.Adadelta(model.parameters(), lr=1)

    
    scheduler = StepLR(optimizer, step_size=1, gamma=0.7)

    for epoch in range(1, EPOCHS + 1):
        print("------------------------------------------------------------------------")
        randomLayerFreeze(model , threshold=threshold)
        print("------------------------------------------------------------------------")
        startTime=time.time()
        epochLoss=train(model, device, train_loader, optimizer, epoch)
        endTime=time.time()
        elapsedTime=endTime - startTime
        print('{} seconds'.format(elapsedTime))
        timeEpochs.append(elapsedTime)
        test_loss ,accuracy=test(model, device, test_loader)
        accResults.append(accuracy)
        lossResults.append(test_loss)
        #print("valResults="+str(valResults))
        scheduler.step()

    #save_model:
    torch.save(model.state_dict(), "mnist_cnn.pt")
    return timeEpochs, accResults, lossResults

EPOCHS=14
numOfThresholds=10

AllResults=[]
thresholds=np.linspace(0, 1.1, num=numOfThresholds)
for threshold in thresholds:
  timeEpochs, accResults, lossResults=main(EPOCHS,threshold)
  print(threshold,timeEpochs)
  AllResults.append((threshold,timeEpochs,accResults, lossResults))

print("------------------------------------------------------")
averageTime=[]
thresholds=[]
for item in AllResults:
  threshold,timeEpochs,accResults, lossResults=item
  print(threshold,np.average(timeEpochs))
  averageTime.append(np.average(timeEpochs))
  thresholds.append(threshold)
  #print(threshold,accResults)
  #print(threshold,lossResults)
  plt.plot(accResults)
  plt.ylabel("accuracy")
  plt.title(str(threshold))
  fileName=os.path.join("Results",str(threshold)+".png")
  plt.savefig(fileName)
  plt.show()


plt.bar(thresholds, averageTime)
plt.xlabel("Threshold")
plt.ylabel("Average Epoch Time")
fileName=os.path.join("Results","Time Comparison"+".png")
plt.savefig(fileName)

print("------------------------------------------------------")